/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.boisestate.SimSearcher;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.SwingWorker;
import kMeanCluster.ClusterDaemon;
import map.Molecule;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import query.QueryDriver;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//edu.boisestate.SimSearcher//main//EN",
        autostore = false
)
@TopComponent.Description(
//        preferredID = "mainTopComponent"
        preferredID = "SimSearchTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "edu.boisestate.SimSearcher.mainTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_mainAction",
        preferredID = "SimSearchTopComponent"
//        preferredID = "mainTopComponent"
)
@Messages({
    "CTL_mainAction=SimSearcher",
    "CTL_mainTopComponent=SimSearcher window",
    "HINT_mainTopComponent=This is a window for performing molecular similarity searches"
})
public final class SimSearchTopComponent extends TopComponent {
    
    private final static String SWARM_CMD_FILE = "swarmCmds.txt";

    public SimSearchTopComponent() {
        initComponents();
        setName(Bundle.CTL_mainTopComponent());
        setToolTipText(Bundle.HINT_mainTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputTxtArea = new javax.swing.JTextArea();
        mapButton = new javax.swing.JButton();
        clusterButton = new javax.swing.JButton();
        queryButton = new javax.swing.JButton();

        outputTxtArea.setEditable(false);
        outputTxtArea.setColumns(20);
        outputTxtArea.setRows(5);
        jScrollPane1.setViewportView(outputTxtArea);
        outputTxtArea.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(SimSearchTopComponent.class, "SimSearchTopComponent.outputTxtArea.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mapButton, org.openide.util.NbBundle.getMessage(SimSearchTopComponent.class, "SimSearchTopComponent.mapButton.text")); // NOI18N
        mapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clusterButton, org.openide.util.NbBundle.getMessage(SimSearchTopComponent.class, "SimSearchTopComponent.clusterButton.text")); // NOI18N
        clusterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(queryButton, org.openide.util.NbBundle.getMessage(SimSearchTopComponent.class, "SimSearchTopComponent.queryButton.text")); // NOI18N
        queryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mapButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clusterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(queryButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mapButton)
                    .addComponent(clusterButton)
                    .addComponent(queryButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapButtonActionPerformed
        MappingWizardAction wizard = new MappingWizardAction();
        wizard.actionPerformed(evt);
        final String workDir = System.getProperty("user.home"); //TODO, output folder and then delete ???
        if(wizard.wasCancelled()){

        }else{
            wizard.generateSwarmCmdFile(workDir, SWARM_CMD_FILE);
            wizard.writeDatabaseSettings();
            String swm_opts = wizard.getSwarmCmdOptions();
            final String cmd = "swarm -f " + workDir + File.separator + SWARM_CMD_FILE + " " + swm_opts;
            outputTxtArea.setText("DockoMatic has submitted jobs which will map the molecular database.  You will be notified when "
                    + "the jobs are complete.\nTo verify that the jobs are actually running, use the qstat command "
                    + "and/or periodically check the contents of the output directory.\n");

            SwingWorker jobMakeWorker = new SwingWorker<String, Void>() {

                @Override
                public String doInBackground() {
                    executeSwarm(cmd,new File(workDir));
                    return "Done";
                }
            };
            jobMakeWorker.execute();
        }    
    }//GEN-LAST:event_mapButtonActionPerformed

    private void clusterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterButtonActionPerformed
        ClusteringWizardAction wizard = new ClusteringWizardAction();
        wizard.actionPerformed(evt);
        if(wizard.wasCancelled()){
            
        }else{
            wizard.writeDatabaseSettings();
            final ClusterDaemon daemon = wizard.getDaemon();
            daemon.setTextArea(outputTxtArea);
            
            outputTxtArea.setText("The cluster daemon is beginning work.");

            SwingWorker jobMakeWorker = new SwingWorker<String, Void>() {

                @Override
                public String doInBackground() {
                    daemon.run();
                    return "Done";
                }
            };
            jobMakeWorker.execute();
        }
    }//GEN-LAST:event_clusterButtonActionPerformed

    private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryButtonActionPerformed
        QueryWizardAction wizard = new QueryWizardAction();
        wizard.actionPerformed(evt);
        if(wizard.wasCancelled()){
            
        }else{
            final QueryDriver queryJoe = wizard.getQueryDriver();
            final String search_folder = wizard.getSearchFolder();
            final Molecule[] molList = wizard.getQueryMols();
            
            outputTxtArea.setText("Beginning Query...\n");
            
            SwingWorker jobMakeWorker = new SwingWorker<String, Void>() {

                @Override
                public String doInBackground() {
                    File srchFolder = new File(search_folder);
                    for(Molecule mol : molList){
                        String results = queryJoe.query(srchFolder,mol);
                        String dotLine = "**************************************";
                        outputTxtArea.append(dotLine +"\nResults for " + mol.getCID() +"\n\n" +results + "\n" + dotLine+"\n");
                    }
                    return "Done";
                }
            };
            jobMakeWorker.execute();
        }
    }//GEN-LAST:event_queryButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clusterButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mapButton;
    static javax.swing.JTextArea outputTxtArea;
    private javax.swing.JButton queryButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    void executeSwarm(String command, File dir){
        String line, errorLog = "";
        
        try{
            Process procID = Runtime.getRuntime().exec(command); // , null, dir);
            procID.waitFor();
            BufferedReader in = new BufferedReader(new InputStreamReader(procID.getErrorStream()));
            while ((line = in.readLine()) != null) {
                errorLog += line + "\n";
            }
            outputTxtArea.append(errorLog);
        }catch(IOException ex){
            outputTxtArea.append(ex.getLocalizedMessage() + "\n");
        }catch(InterruptedException ex){
            outputTxtArea.append(ex.getLocalizedMessage() + "\n");
        }
        outputTxtArea.append("The mapping is complete.");
    }
}
