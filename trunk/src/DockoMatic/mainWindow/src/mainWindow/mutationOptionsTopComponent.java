/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mainWindow;

import java.util.ArrayList;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.InputMismatchException;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/*
 * 
 * TODO in this class
 * 
 * Validate the fields
 * Put meaningful code in validGAparams()
 * 
 * 
 * 
 * 
 * 
 * 
 * make a better selection screen [DONE]
 *      implement search
 *          parse the ligands PDB file and get the single letter amino acid sequence
 *          store that value ... then the search is just displaying a substring of that
 *          according to search parameters. [DONE]
 *          Allow selection from search display [DONE]
 * 
 *
 * 
 * 
 * 
 * Validation : ligand's PDB file must be entered before this window can pop up [DONE]
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */
/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//mainWindow//mutationOptions//EN",
autostore = false)
@TopComponent.Description(
        preferredID = "mutationOptionsTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "mainWindow.mutationOptionsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_mutationOptionsAction",
preferredID = "mutationOptionsTopComponent")
@Messages({
    "CTL_mutationOptionsAction=mutationOptions",
    "CTL_mutationOptionsTopComponent=mutationOptions Window",
    "HINT_mutationOptionsTopComponent=This is a mutationOptions window"
})
public final class mutationOptionsTopComponent extends TopComponent {

    private boolean exhaustiveSearch;
    private int[] sub_sites;
    private String[] sub_Pools;
    private String origSiteAcids;
    private String fullSequence;
    private int lwrSrchIndex;
    private int uprSrchIndex;

    public mutationOptionsTopComponent() {
        initComponents();
        setName(Bundle.CTL_mutationOptionsTopComponent());
        setToolTipText(Bundle.HINT_mutationOptionsTopComponent());

        this.mutationPane.setEnabledAt(1, false);
        this.mutationPane.setEnabledAt(2, false);

        this.ElitismField.setText(".15");
        this.mutationRateField.setText(".05");
        this.RandomField.setText(".05");
        this.subPoolsDisplay.setEditable(false);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        mutationPane = new javax.swing.JTabbedPane();
        mutatePanel = new javax.swing.JPanel();
        SitesTxtField = new javax.swing.JTextField();
        MutationsLabel1 = new javax.swing.JLabel();
        lwrSrchTxtField = new javax.swing.JTextField();
        uppSrchTxtField = new javax.swing.JTextField();
        seqSearchButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayList = new javax.swing.JList();
        uprIndexLabel = new javax.swing.JLabel();
        Cont2SubPoolsButton = new javax.swing.JButton();
        srchResultsLabel = new javax.swing.JLabel();
        lwrIndexLabel = new javax.swing.JLabel();
        mutationLabel2 = new javax.swing.JLabel();
        subpoolPanel = new javax.swing.JPanel();
        continueButton1 = new javax.swing.JButton();
        poolpanLabel1 = new javax.swing.JLabel();
        poolpanLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SubPoolList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        subPoolsDisplay = new javax.swing.JTextArea();
        currPools2Label = new javax.swing.JLabel();
        subPoolEntryButton = new javax.swing.JButton();
        GAparameters = new javax.swing.JPanel();
        max_populationField = new javax.swing.JTextField();
        mutationRateField = new javax.swing.JTextField();
        ElitismField = new javax.swing.JTextField();
        jobsPerLabel = new javax.swing.JLabel();
        MutateRateLabel = new javax.swing.JLabel();
        ElitismLabel = new javax.swing.JLabel();
        RandomField = new javax.swing.JTextField();
        RandomLabel = new javax.swing.JLabel();
        ContinueButton2 = new javax.swing.JButton();
        topXorgsLabel = new javax.swing.JLabel();
        topXtxtField = new javax.swing.JTextField();
        gaAdvParamsButton = new javax.swing.JButton();

        SitesTxtField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.SitesTxtField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(MutationsLabel1, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.MutationsLabel1.text")); // NOI18N

        lwrSrchTxtField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.lwrSrchTxtField.text")); // NOI18N

        uppSrchTxtField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.uppSrchTxtField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(seqSearchButton, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.seqSearchButton.text")); // NOI18N
        seqSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seqSearchButtonActionPerformed(evt);
            }
        });

        displayList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        displayList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        displayList.setVisibleRowCount(1);
        displayList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                displayListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(displayList);

        org.openide.awt.Mnemonics.setLocalizedText(uprIndexLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.uprIndexLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(Cont2SubPoolsButton, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.Cont2SubPoolsButton.text")); // NOI18N
        Cont2SubPoolsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cont2SubPoolsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(srchResultsLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.srchResultsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lwrIndexLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.lwrIndexLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mutationLabel2, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.mutationLabel2.text")); // NOI18N

        javax.swing.GroupLayout mutatePanelLayout = new javax.swing.GroupLayout(mutatePanel);
        mutatePanel.setLayout(mutatePanelLayout);
        mutatePanelLayout.setHorizontalGroup(
                mutatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addGroup(mutatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(SitesTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mutatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(srchResultsLabel))
                .addGroup(mutatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lwrIndexLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lwrSrchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(uprIndexLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uppSrchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(seqSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(MutationsLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(mutationLabel2)))
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(Cont2SubPoolsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(477, Short.MAX_VALUE)));
        mutatePanelLayout.setVerticalGroup(
                mutatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mutatePanelLayout.createSequentialGroup()
                .addComponent(MutationsLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SitesTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(mutationLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mutatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lwrSrchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(uppSrchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(uprIndexLabel)
                .addComponent(lwrIndexLabel)
                .addComponent(seqSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srchResultsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Cont2SubPoolsButton)
                .addContainerGap(189, Short.MAX_VALUE)));

        mutationPane.addTab(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.mutatePanel.TabConstraints.tabTitle"), mutatePanel); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(continueButton1, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.continueButton1.text")); // NOI18N
        continueButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(poolpanLabel1, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.poolpanLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(poolpanLabel2, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.poolpanLabel2.text")); // NOI18N

        SubPoolList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        SubPoolList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        SubPoolList.setVisibleRowCount(1);
        SubPoolList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SubPoolListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(SubPoolList);

        subPoolsDisplay.setColumns(20);
        subPoolsDisplay.setRows(5);
        jScrollPane1.setViewportView(subPoolsDisplay);

        org.openide.awt.Mnemonics.setLocalizedText(currPools2Label, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.currPools2Label.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(subPoolEntryButton, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.subPoolEntryButton.text")); // NOI18N
        subPoolEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subPoolEntryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subpoolPanelLayout = new javax.swing.GroupLayout(subpoolPanel);
        subpoolPanel.setLayout(subpoolPanelLayout);
        subpoolPanelLayout.setHorizontalGroup(
                subpoolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(subpoolPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(subpoolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(subpoolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(poolpanLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(poolpanLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, subpoolPanelLayout.createSequentialGroup()
                .addComponent(continueButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(subpoolPanelLayout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addComponent(subPoolEntryButton)
                .addGap(54, 54, 54)
                .addComponent(currPools2Label)))
                .addContainerGap(420, Short.MAX_VALUE)));
        subpoolPanelLayout.setVerticalGroup(
                subpoolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subpoolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(poolpanLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(poolpanLabel2)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(subpoolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(subpoolPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(currPools2Label)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                .addGroup(subpoolPanelLayout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subPoolEntryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(continueButton1)))
                .addGap(21, 21, 21)));

        mutationPane.addTab(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.subpoolPanel.TabConstraints.tabTitle"), subpoolPanel); // NOI18N

        max_populationField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.max_populationField.text")); // NOI18N

        mutationRateField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.mutationRateField.text")); // NOI18N

        ElitismField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.ElitismField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jobsPerLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.jobsPerLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(MutateRateLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.MutateRateLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ElitismLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.ElitismLabel.text")); // NOI18N

        RandomField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.RandomField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(RandomLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.RandomLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ContinueButton2, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.ContinueButton2.text")); // NOI18N
        ContinueButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(topXorgsLabel, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.topXorgsLabel.text")); // NOI18N

        topXtxtField.setText(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.topXtxtField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(gaAdvParamsButton, org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.gaAdvParamsButton.text")); // NOI18N
        gaAdvParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaAdvParamsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GAparametersLayout = new javax.swing.GroupLayout(GAparameters);
        GAparameters.setLayout(GAparametersLayout);
        GAparametersLayout.setHorizontalGroup(
                GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GAparametersLayout.createSequentialGroup()
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, GAparametersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ElitismLabel)
                .addGap(33, 33, 33)
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(RandomLabel)
                .addComponent(RandomField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(MutateRateLabel)))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, GAparametersLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(ContinueButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(GAparametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ElitismField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(GAparametersLayout.createSequentialGroup()
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(gaAdvParamsButton, javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, GAparametersLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(max_populationField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topXtxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(GAparametersLayout.createSequentialGroup()
                .addComponent(jobsPerLabel)
                .addGap(18, 18, 18)
                .addComponent(topXorgsLabel)))))
                .addContainerGap(767, Short.MAX_VALUE)));
        GAparametersLayout.setVerticalGroup(
                GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GAparametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jobsPerLabel)
                .addComponent(topXorgsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(max_populationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(topXtxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(gaAdvParamsButton)
                .addGap(48, 48, 48)
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ElitismLabel)
                .addComponent(RandomLabel)
                .addComponent(MutateRateLabel))
                .addGap(5, 5, 5)
                .addGroup(GAparametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(ElitismField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(RandomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(mutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                .addComponent(ContinueButton2)
                .addContainerGap()));

        mutationPane.addTab(org.openide.util.NbBundle.getMessage(mutationOptionsTopComponent.class, "mutationOptionsTopComponent.GAparameters.TabConstraints.tabTitle"), GAparameters); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mutationPane)
                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(mutationPane, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)));
    }// </editor-fold>                        

    private void ContinueButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (createGAobject()) {
            this.close();
        }
    }

    private void displayListValueChanged(javax.swing.event.ListSelectionEvent evt) {
        // TODO add your handling code here:
        if (!displayList.getValueIsAdjusting()) {
            String newLine = "," + (displayList.getSelectedIndex() + 1 + lwrSrchIndex);

            if (SitesTxtField.getText().trim().equals("")) {
                SitesTxtField.setText(newLine.substring(1)); //first entry, remove leading comma
            } else {
                SitesTxtField.setText(SitesTxtField.getText().trim() + newLine);
            }
        }
    }

    private void seqSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {

            //assumes that user used indices 1 -> length, not the usual 0 -> length-1
            lwrSrchIndex = Integer.parseInt(this.lwrSrchTxtField.getText().trim()) - 1;
            uprSrchIndex = Integer.parseInt(this.uppSrchTxtField.getText().trim()) - 1;

            displayList.setEnabled(false);

            Character[] list;

            fullSequence = fullSequence.trim();

            int indeX = 0;

            if (lwrSrchIndex < 0) {
                messageWindowTopComponent.messageArea.append("Setting the Lower Index to the minimum value of 1.\n");
                lwrSrchTxtField.setText("1");
                lwrSrchIndex = 0;
            }
            if (uprSrchIndex >= fullSequence.length()) {
                messageWindowTopComponent.messageArea.append("Setting the maximum Upper Index to " + fullSequence.length() + "\n");
                uppSrchTxtField.setText("" + fullSequence.length());
                uprSrchIndex = fullSequence.length() - 1;
            }

            if (lwrSrchIndex < uprSrchIndex) {
                this.displayList.setEnabled(true);
                list = new Character[1 + uprSrchIndex - lwrSrchIndex];
                for (int i = lwrSrchIndex; i <= uprSrchIndex; i++) {
                    list[indeX++] = fullSequence.charAt(i);
                }
                this.displayList.setListData(list);
            } else {
                messageWindowTopComponent.messageArea.append("Lower Index must be less than Upper Index\n");
            }


            //outofbounds

        } catch (NumberFormatException ex) {
            messageWindowTopComponent.messageArea.append("The values for the indices must be integers.");
        };
    }

    private void Cont2SubPoolsButtonActionPerformed(java.awt.event.ActionEvent evt) {

        //TODO ensure sites are in range and that the parsing was successful
        if (parseSites(SitesTxtField.getText().trim())) {

            origSiteAcids = "";

            String[] tmp = new String[sub_sites.length];

            for (int i = 0; i < sub_sites.length; i++) {
                origSiteAcids += this.fullSequence.charAt(sub_sites[i] - 1);
                tmp[i] = fullSequence.charAt(sub_sites[i] - 1) + "" + sub_sites[i];
            }

            //subPoolsTxtArea.setText(tmp.substring(0, tmp.length()-1)); //remove trailing newline character
            this.SubPoolList.setListData(tmp);

            this.sub_Pools = new String[sub_sites.length];

            //this.subpoolPanel.setVisible(true);
            this.mutationPane.setEnabledAt(1, true);
            this.mutationPane.setSelectedComponent(this.subpoolPanel);
        } else {
            JOptionPane.showMessageDialog(this, "Your entry should be a comma delimited list of integers in the range [1," + fullSequence.length() + "]");
        }
    }

    private void continueButton1ActionPerformed(java.awt.event.ActionEvent evt) {

        boolean okay = true;

        //check to see that all pools have something in them
        for (String pool : this.sub_Pools) {
            if (pool == null) {
                okay = false;
            }
        }

        if (okay) {
            exhaustiveSearch = JOptionPane.showConfirmDialog(this, "Would you like to do an exhaustive search?", "Exhaustive Search", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;

            //TODO validate that all entries of sub_Pools have something in them before running refinePools()
            //refinePools();

            //IF exhaustive, go back to the openerTopComponent
            //ELSE, go to the next tab (GA parameters)
            if (exhaustiveSearch) {
                this.close();
            } else {
                this.mutationPane.setEnabledAt(2, true);
                //this.GAparameters.setVisible(true);
                this.ElitismField.setVisible(false);
                this.ElitismLabel.setVisible(false);
                this.RandomField.setVisible(false);
                this.RandomLabel.setVisible(false);
                this.mutationRateField.setVisible(false);
                this.MutateRateLabel.setVisible(false);
                //this.mutationPane.setEnabledAt(2, true);
                this.mutationPane.setSelectedComponent(this.GAparameters);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Every acid/site pair needs to have a substitution set entered.");
        }
    }

    private void gaAdvParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        this.ElitismField.setVisible(true);
        this.ElitismLabel.setVisible(true);
        this.RandomField.setVisible(true);
        this.RandomLabel.setVisible(true);
        this.mutationRateField.setVisible(true);
        this.MutateRateLabel.setVisible(true);
    }

    private void SubPoolListValueChanged(javax.swing.event.ListSelectionEvent evt) {
    }

    private void subPoolEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String messageT = "Please enter the list, e.g. AGCI, of amino acids to substitute at the selected sites.";

        String temp = JOptionPane.showInputDialog(this, messageT);

        if (temp != null) {
            temp = temp.trim().toUpperCase();

            if (validAcids(temp)) {
                int[] indices = SubPoolList.getSelectedIndices();

                for (int index : indices) {
                    sub_Pools[index] = temp;
                }
                updatePoolText();
            } else {
                JOptionPane.showMessageDialog(this, "You have entered at least one invalid acid symbol. Please reenter.");
            }
        }
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton Cont2SubPoolsButton;
    private javax.swing.JButton ContinueButton2;
    private javax.swing.JTextField ElitismField;
    private javax.swing.JLabel ElitismLabel;
    private javax.swing.JPanel GAparameters;
    private javax.swing.JLabel MutateRateLabel;
    private javax.swing.JLabel MutationsLabel1;
    private javax.swing.JTextField RandomField;
    private javax.swing.JLabel RandomLabel;
    private javax.swing.JTextField SitesTxtField;
    private javax.swing.JList SubPoolList;
    private javax.swing.JButton continueButton1;
    private javax.swing.JLabel currPools2Label;
    private javax.swing.JList displayList;
    private javax.swing.JButton gaAdvParamsButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jobsPerLabel;
    private javax.swing.JLabel lwrIndexLabel;
    private javax.swing.JTextField lwrSrchTxtField;
    private javax.swing.JTextField max_populationField;
    private javax.swing.JPanel mutatePanel;
    private javax.swing.JLabel mutationLabel2;
    private javax.swing.JTabbedPane mutationPane;
    private javax.swing.JTextField mutationRateField;
    private javax.swing.JLabel poolpanLabel1;
    private javax.swing.JLabel poolpanLabel2;
    private javax.swing.JButton seqSearchButton;
    private javax.swing.JLabel srchResultsLabel;
    private javax.swing.JButton subPoolEntryButton;
    private javax.swing.JTextArea subPoolsDisplay;
    private javax.swing.JPanel subpoolPanel;
    private javax.swing.JLabel topXorgsLabel;
    private javax.swing.JTextField topXtxtField;
    private javax.swing.JTextField uppSrchTxtField;
    private javax.swing.JLabel uprIndexLabel;
    // End of variables declaration                   

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening

        Object[] blanks = {"", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};
        this.displayList.setListData(blanks);
        this.displayList.setEnabled(false);


        //TODO verify that the ligand field has something in it.      


    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    //create the GA object, assuming that all fields have been entered
    private boolean createGAobject() {
        //get parameters
        try {
            double elitism = Double.parseDouble(ElitismField.getText().trim());  //need to validate field later
            double randomness = Double.parseDouble(RandomField.getText().trim());  //need to validate field later
            double mutation_rate = Double.parseDouble(mutationRateField.getText().trim());  //need to validate field later
            int maxPop = Integer.parseInt(max_populationField.getText().trim());  //need to validate field later
            int topX = Integer.parseInt(topXtxtField.getText().trim()); //need to validate later

            int srchSpaceSize = 1; //size of search space ... product of sub_Pools lengths

            for (String sbset : sub_Pools) {
                srchSpaceSize *= sbset.length();
            }

            if (maxPop > srchSpaceSize / 20) //don't allow a disproportionately large population limit
            {
                maxPop = srchSpaceSize / 20;
            }

            if (elitism * maxPop < topX) //this cannot be true if the GA is to work as programmed
            {
                elitism = ((double) topX) / maxPop;
            }


//           TODO change: genSearch = new GeneticSearch(sub_sites, origSiteAcids, sub_Pools, 'N', maxPop, topX, elitism, randomness, mutation_rate);

            return true;

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "The 2 normal GA parameters should be integers and "
                    + "the advanced parameters should be numeric values between 0 and 1.");
        }

        return false;

    }

    //openerTopComponent should pass these values to mutationOptionsTopComponent, which should call this method
    //public void setDockParams(int cyc, File outDir, int currJobNum, String ligFile, String recFile, String boxFile, String swarmCmd)
    public void updateDockParams(int cyc, File outDir, int currJobNum, String ligFile, String recFile, String boxFile, String swarmCmd) {
        //TODO change  :  genSearch.setDockParams(cyc, outDir, currJobNum, ligFile, recFile, boxFile, swarmCmd);
    }

    public boolean isExhaustive() {
        return exhaustiveSearch;
    }

    private boolean parseSites(String data) {
        try {
            ArrayList<Integer> temp = new ArrayList<Integer>();
            Scanner scan = new Scanner(data);
            scan.useDelimiter(",");
            int tmp;

            while (scan.hasNext()) {
                tmp = scan.nextInt();

                //check if value is in range
                if (tmp > 0 && tmp <= this.fullSequence.length()) {
                    if (!temp.contains(tmp)) //don't allow duplicates
                    {
                        temp.add(tmp);
                    }
                } else {
                    return false;
                }
            }

            sub_sites = new int[temp.size()];
            for (int i = 0; i < temp.size(); i++) {
                sub_sites[i] = temp.get(i);
            }

            return true;

        } catch (NumberFormatException ex) {
        } catch (InputMismatchException ex) {
        }

        return false;
    }

    public ArrayList<String> generateExhaustiveList(String ligPath) {
        ArrayList<String> list = new ArrayList<String>();
        recurse(0, ligPath, list);
        return list;
    }

    //recursive method to generate all possible mutations given fixed sites and pools
    private void recurse(int index, String runTotal, ArrayList<String> list) {
        if (index == sub_sites.length) //end of the line, write it to the file
        {
            list.add(runTotal);
        } else {
            for (int num = 0; num < sub_Pools[index].length(); num++) //for each acid in the set
            {
                if (sub_Pools[index].charAt(num) == origSiteAcids.charAt(index)) //no mutation at this spot, continue on
                {
                    recurse(index + 1, runTotal, list);
                } else {
                    recurse(index + 1, runTotal + ":" + origSiteAcids.charAt(index) + sub_sites[index] + sub_Pools[index].charAt(num), list);
                }
            }
        }

    }

    public boolean setFullSequence(String fileName) {
        try {
            Scanner scan = new Scanner(new File(fileName));
            HashMap<String, String> acidConv = new HashMap<String, String>();

            //DO NOT CHANGE THESE VALUES
            acidConv.put("ALA", "A");
            acidConv.put("ARG", "R");
            acidConv.put("ASN", "N");
            acidConv.put("ASP", "D");
            acidConv.put("CYS", "C");
            acidConv.put("GLU", "E");
            acidConv.put("GLN", "Q");
            acidConv.put("GLY", "G");
            acidConv.put("HIS", "H");
            acidConv.put("ILE", "I");
            acidConv.put("LEU", "L");
            acidConv.put("LYS", "K");
            acidConv.put("MET", "M");
            acidConv.put("PHE", "F");
            acidConv.put("PRO", "P");
            acidConv.put("SER", "S");
            acidConv.put("THR", "T");
            acidConv.put("TRP", "W");
            acidConv.put("TYR", "Y");
            acidConv.put("VAL", "V");


            String fullSeq = "";
            String lineSEQRES = "", temp;
            boolean foundFirst = false;

            while (scan.hasNext()) {
                temp = scan.nextLine();
                if (temp.length() > 7 && temp.substring(0, 6).equals("SEQRES")) {
                    lineSEQRES += temp + " ";
                    foundFirst = true;
                } else if (foundFirst) //SEQRES lines will be consecutive, so we don't need to finish scanning the file
                {
                    break;
                }
            }

            scan.close();

            if (foundFirst) {
                Scanner acidParse = new Scanner(lineSEQRES);

                while (acidParse.hasNext()) {
                    temp = acidParse.next();
                    if (acidConv.containsKey(temp.toUpperCase())) {
                        fullSeq += acidConv.get(temp.toUpperCase());
                    }
                }

                acidParse.close();

                fullSequence = fullSeq;
                return true;
            }

            //else
            //messageWindowTopComponent.messageArea.append("Unable to determine the sequence from the ligand's pdb file.  Please make sure that it contains " +
            //                                             "the neccessary SEQRES lines before trying again.");

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return false;
    }

    private int indexOf(int[] list, int item) {
        for (int i = 0; i < list.length; i++) {
            if (list[i] == item) {
                return i;
            }
        }
        return -1;
    }

    private void updatePoolText() {
        String poolRep = "";

        for (int j = 0; j < sub_sites.length; j++) {
            poolRep += this.origSiteAcids.charAt(j) + "" + sub_sites[j] + ": " + (sub_Pools[j] == null ? "" : sub_Pools[j]) + "\n";
        }

        this.subPoolsDisplay.setText(poolRep);
    }

    //check for valid acid symbols
    private boolean validAcids(String list) {
        String validAcids = "ARNDCQEGHILKMFPSTWYV";

        for (int index = 0; index < list.length(); index++) {
            if (!validAcids.contains(list.charAt(index) + "")) {
                return false;
            }
        }

        return true;
    }
}
/*tlong_TODO
 * Need to make this look prettier, add validation, make the substitution
 * pool section better (maybe add the amino acid sequence and allow selection)
 * , add tracking code, get this to pop up from the openerTopComponent,
 * add a button to cancel or submit
 * 
 * 
 * 
 * 
 */
