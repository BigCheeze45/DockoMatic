/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mainWindow;

import Job.Job;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//mainWindow//opener//EN",
autostore = false)
public final class openerTopComponent extends TopComponent{// implements TableModelListener{
    //implements LookupListener{

private Vector <Job> jobVector = new Vector<Job>();
private Hashtable <Integer, Timer> extraLigStatHash = new Hashtable<Integer, Timer>();
private Vector <String> ligVector = new Vector<String>();
private Vector <String> recVector = new Vector<String>();
private Vector <String> boxVector = new Vector<String>();
private Vector <String> appVector = new Vector<String>();
private ArrayList <String> modList = new ArrayList<String>();
private Timer jobTimer;
private boolean tabFlag = false;

private DefaultTableModel model;
private JTable table;
private int currJobNumber = 0;
private int totalJobs = 0;
private boolean ligList = false;
private boolean recList = false;
private boolean boxList = false;
private boolean appList = false;

private File outDir;
private File ligFile;
private File recFile;
private File boxFile;
private File appFile;
private File confFile;
private int exceptionNum = 0;
private String lastOutDir = ".";
private String lastLigDir = ".";
private String lastBoxDir = ".";
private String lastRecDir = ".";
private String lastAppendDir = ".";
private ModInLookListener modListen;
private Lookup.Result res = null;
//private TableModelListener listen;

	private static openerTopComponent instance;
	/** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
	private static final String PREFERRED_ID = "openerTopComponent";

	public openerTopComponent() {
		initComponents();
		setName(NbBundle.getMessage(openerTopComponent.class, "CTL_openerTopComponent"));
		setToolTipText(NbBundle.getMessage(openerTopComponent.class, "HINT_openerTopComponent"));
		modListen = new ModInLookListener();
		//res = WindowManager.getDefault().findTopComponent("modInputTopComponent").getLookup().lookupResult(String.class);
		res = WindowManager.getDefault().findTopComponent("modInputTopComponent").getLookup().lookupResult(ArrayList.class);
		//res = WindowManager.getDefault().findTopComponent("modInputTopComponent").getLookup().lookupResult(ModInfo.class);
		res.addLookupListener(modListen);
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

	}

//	@Override
//	public void tableChanged(TableModelEvent e){
//		TableModel tmpTable = (TableModel)e.getSource();
//		int row = e.getFirstRow();
//		if(e.getType() == e.UPDATE)
//		    System.out.println("TABLE UPDATED");
//		if(((String)tmpTable.getValueAt(row, 7)).equals("Started"))
//			System.out.println("JOB STARTED");
//	}

private class ModInLookListener implements LookupListener {
  @Override
  @SuppressWarnings("unchecked")
  public void resultChanged(LookupEvent ev) {
	String tmp;
	//ModInfo mofo;
        Lookup.Result result = (Lookup.Result) ev.getSource();
        Collection<? extends ArrayList> items = result.allInstances();
        //Collection<? extends ModInfo> items = result.allInstances();
	if(!items.isEmpty()){
	 // ModInfo mofo = items.iterator().next();
	  ArrayList<String> mofo = items.iterator().next();
          //Iterator it = mofo.iterator();
	  makeModelJob(mofo.get(0), mofo.get(1), mofo.get(2));
	  //while(it.hasNext()){
	  ////mofo = (ModInfo)it.next();
	  //  tmp = (String)it.next();
	  //messageArea.append("GOT LOOKUP "+tmp+"\n");
	//}
        }
	//System.out.println("GOT LOOKUP DIR"+tmp+"\n");
	//messageArea.append("GOT LOOKUP DIR"+tmp[0]+"\n");
   }
}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPanel1 = new javax.swing.JPanel();
                jPanel3 = new javax.swing.JPanel();
                outDirButton = new javax.swing.JButton();
                outDirField = new javax.swing.JTextField();
                jPanel4 = new javax.swing.JPanel();
                LigandButton = new javax.swing.JButton();
                ligandField = new javax.swing.JTextField();
                ligandCheckBox = new javax.swing.JCheckBox();
                jPanel5 = new javax.swing.JPanel();
                receptorButton = new javax.swing.JButton();
                receptorField = new javax.swing.JTextField();
                receptorCheckBox = new javax.swing.JCheckBox();
                jPanel6 = new javax.swing.JPanel();
                boxCoordButton = new javax.swing.JButton();
                boxCoordField = new javax.swing.JTextField();
                boxCoordCheckBox = new javax.swing.JCheckBox();
                jPanel7 = new javax.swing.JPanel();
                appendButton = new javax.swing.JButton();
                appendField = new javax.swing.JTextField();
                appCheckBox = new javax.swing.JCheckBox();
                jPanel9 = new javax.swing.JPanel();
                resChkGpfButton = new javax.swing.JButton();
                resChkGpfField = new javax.swing.JTextField();
                jPanel2 = new javax.swing.JPanel();
                avgButton = new javax.swing.JButton();
                newJobButton = new javax.swing.JButton();
                startAllJobsButton = new javax.swing.JButton();
                StartSelectedJobButton = new javax.swing.JButton();
                removeAllJobsButton = new javax.swing.JButton();
                removeSelectedJobButton = new javax.swing.JButton();
                pymolButton = new javax.swing.JButton();
                swarmCheckBox = new javax.swing.JCheckBox();
                swarmToggleButton = new javax.swing.JToggleButton();
                jButton1 = new javax.swing.JButton();
                newTabChBox = new javax.swing.JCheckBox();
                jPanel8 = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                messageArea = new javax.swing.JTextArea();
                jLabel1 = new javax.swing.JLabel();

                org.openide.awt.Mnemonics.setLocalizedText(outDirButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.outDirButton.text")); // NOI18N
                outDirButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                outDirButtonActionPerformed(evt);
                        }
                });

                outDirField.setText(org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.outDirField.text")); // NOI18N

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(outDirField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(outDirButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                                .addContainerGap(55, Short.MAX_VALUE))
                );
                jPanel3Layout.setVerticalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(outDirButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(27, Short.MAX_VALUE))
                );

                org.openide.awt.Mnemonics.setLocalizedText(LigandButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.LigandButton.text")); // NOI18N
                LigandButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                LigandButtonActionPerformed(evt);
                        }
                });

                ligandField.setText(org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.ligandField.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(ligandCheckBox, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.ligandCheckBox.text")); // NOI18N
                ligandCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                ligandCheckBoxActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ligandCheckBox)
                                        .addComponent(ligandField)
                                        .addComponent(LigandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(68, Short.MAX_VALUE))
                );
                jPanel4Layout.setVerticalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(LigandButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ligandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ligandCheckBox)
                                .addContainerGap())
                );

                org.openide.awt.Mnemonics.setLocalizedText(receptorButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.receptorButton.text")); // NOI18N
                receptorButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                receptorButtonActionPerformed(evt);
                        }
                });

                receptorField.setText(org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.receptorField.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(receptorCheckBox, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.receptorCheckBox.text")); // NOI18N
                receptorCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                receptorCheckBoxActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
                jPanel5.setLayout(jPanel5Layout);
                jPanel5Layout.setHorizontalGroup(
                        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(receptorCheckBox)
                                        .addComponent(receptorField, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                        .addComponent(receptorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(60, Short.MAX_VALUE))
                );
                jPanel5Layout.setVerticalGroup(
                        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(receptorButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(receptorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(receptorCheckBox)
                                .addContainerGap())
                );

                org.openide.awt.Mnemonics.setLocalizedText(boxCoordButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.boxCoordButton.text")); // NOI18N
                boxCoordButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                boxCoordButtonActionPerformed(evt);
                        }
                });

                boxCoordField.setText(org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.boxCoordField.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(boxCoordCheckBox, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.boxCoordCheckBox.text")); // NOI18N
                boxCoordCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                boxCoordCheckBoxActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
                jPanel6.setLayout(jPanel6Layout);
                jPanel6Layout.setHorizontalGroup(
                        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(boxCoordCheckBox)
                                        .addComponent(boxCoordField, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                        .addComponent(boxCoordButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(53, Short.MAX_VALUE))
                );
                jPanel6Layout.setVerticalGroup(
                        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(boxCoordButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxCoordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(boxCoordCheckBox)
                                .addContainerGap())
                );

                org.openide.awt.Mnemonics.setLocalizedText(appendButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.appendButton.text")); // NOI18N
                appendButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                appendButtonActionPerformed(evt);
                        }
                });

                appendField.setText(org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.appendField.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(appCheckBox, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.appCheckBox.text")); // NOI18N
                appCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                appCheckBoxActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
                jPanel7.setLayout(jPanel7Layout);
                jPanel7Layout.setHorizontalGroup(
                        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(appendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(appCheckBox)
                                        .addComponent(appendField))
                                .addContainerGap(51, Short.MAX_VALUE))
                );
                jPanel7Layout.setVerticalGroup(
                        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(appendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(appCheckBox)
                                .addContainerGap())
                );

                org.openide.awt.Mnemonics.setLocalizedText(resChkGpfButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.resChkGpfButton.text")); // NOI18N
                resChkGpfButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                resChkGpfButtonActionPerformed(evt);
                        }
                });

                resChkGpfField.setText(org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.resChkGpfField.text")); // NOI18N

                javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
                jPanel9.setLayout(jPanel9Layout);
                jPanel9Layout.setHorizontalGroup(
                        jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(resChkGpfField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(resChkGpfButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                                .addContainerGap(56, Short.MAX_VALUE))
                );
                jPanel9Layout.setVerticalGroup(
                        jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(resChkGpfButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resChkGpfField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(39, Short.MAX_VALUE))
                );

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel6, 0, 85, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(112, 112, 112))
                );

                org.openide.awt.Mnemonics.setLocalizedText(avgButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.avgButton.text")); // NOI18N
                avgButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                avgButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(newJobButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.newJobButton.text")); // NOI18N
                newJobButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                newJobButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(startAllJobsButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.startAllJobsButton.text")); // NOI18N
                startAllJobsButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                startAllJobsButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(StartSelectedJobButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.StartSelectedJobButton.text")); // NOI18N
                StartSelectedJobButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                StartSelectedJobButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(removeAllJobsButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.removeAllJobsButton.text")); // NOI18N
                removeAllJobsButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                removeAllJobsButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(removeSelectedJobButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.removeSelectedJobButton.text")); // NOI18N
                removeSelectedJobButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                removeSelectedJobButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(pymolButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.pymolButton.text")); // NOI18N
                pymolButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                pymolButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(swarmCheckBox, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.swarmCheckBox.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(swarmToggleButton, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.swarmToggleButton.text")); // NOI18N
                swarmToggleButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                swarmToggleButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.jButton1.text")); // NOI18N
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(newTabChBox, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.newTabChBox.text")); // NOI18N
                newTabChBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                newTabChBoxActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(newTabChBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(swarmCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(avgButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(newJobButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(startAllJobsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(StartSelectedJobButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(removeAllJobsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(removeSelectedJobButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(pymolButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                        .addComponent(swarmToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                                .addContainerGap())
                );
                jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(avgButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newJobButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newTabChBox, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startAllJobsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StartSelectedJobButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeAllJobsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeSelectedJobButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pymolButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(swarmCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(swarmToggleButton)
                                .addContainerGap(21, Short.MAX_VALUE))
                );

                messageArea.setColumns(20);
                messageArea.setEditable(false);
                messageArea.setRows(5);
                jScrollPane1.setViewportView(messageArea);

                org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(openerTopComponent.class, "openerTopComponent.jLabel1.text")); // NOI18N

                javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
                jPanel8.setLayout(jPanel8Layout);
                jPanel8Layout.setHorizontalGroup(
                        jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addGap(302, 302, 302)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );
                jPanel8Layout.setVerticalGroup(
                        jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                );

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel1, 0, 390, Short.MAX_VALUE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
        }// </editor-fold>//GEN-END:initComponents

/*    @Override
    public void resultChanged(LookupEvent ev){
	    System.out.println("***********RESULT CHANGED\n");
        Lookup.Result result = (Lookup.Result) ev.getSource();
        Collection items = result.allInstances();

	if(!items.isEmpty()){
	Iterator it = items.iterator();
	String tmp = (String)it.next();
        //outDir = new File(((String)it.next()).trim());
	//String sqTmp = (String)it.next();
	//String tpTmp = (String)it.next();
        messageArea.append("GOT LOOKUP DIR"+tmp+"/n");
	}else
		          messageArea.append("GOT NO LOOKUP DIR/n");

        //alignJobNums();
	    //System.out.println("alignedJobs " );

	//makeModelJob(sqTmp, tpTmp);

    }
*/
    // Prompt window to select a directory from the filesystem.
    private String getDirChoose(String lastDir){
        String dir = null;
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(lastDir);
        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int retval = fc.showOpenDialog(this);
        if (retval == fc.APPROVE_OPTION) {
           dir = fc.getSelectedFile().getPath();
        }

        return dir;

    }

    // Prompt window to select a file from the filesystem.
    private String getFileChoose(String lastDir){
        String file = null;
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(lastDir);
        int retval = fc.showOpenDialog(this);
        if (retval == fc.APPROVE_OPTION) {
           file = fc.getSelectedFile().getPath();
        }

        return file;

    }

    private void outDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDirButtonActionPerformed
        String dir = getDirChoose(lastOutDir);
        if(dir != null){
            lastOutDir = dir;
            outDirField.setText(lastOutDir);
        }
    }//GEN-LAST:event_outDirButtonActionPerformed

    private void LigandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LigandButtonActionPerformed
        String file = getFileChoose(lastLigDir);
        if(file != null){
            lastLigDir = file.substring(0, file.lastIndexOf(File.separator));
            ligandField.setText(file);
        }
    }//GEN-LAST:event_LigandButtonActionPerformed

    private void receptorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptorButtonActionPerformed
        String file = getFileChoose(lastRecDir);
        if(file != null){
            lastRecDir = file.substring(0, file.lastIndexOf(File.separator));
            receptorField.setText(file);
        }
    }//GEN-LAST:event_receptorButtonActionPerformed

    private void boxCoordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxCoordButtonActionPerformed
        String file = getFileChoose(lastBoxDir);
        if(file != null){
            lastBoxDir = file.substring(0, file.lastIndexOf(File.separator));
            boxCoordField.setText(file);
        }
    }//GEN-LAST:event_boxCoordButtonActionPerformed

    private void appendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appendButtonActionPerformed
        String file = getFileChoose(lastAppendDir);
        if(file != null){
            lastAppendDir = file.substring(0, file.lastIndexOf(File.separator));
            appendField.setText(file);
        }
    }//GEN-LAST:event_appendButtonActionPerformed

    private void ligandCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ligandCheckBoxActionPerformed
            if(ligandCheckBox.isSelected()){
                    ligList= true;
            }else{
                    ligList = false;
            }
    }//GEN-LAST:event_ligandCheckBoxActionPerformed

    private void receptorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptorCheckBoxActionPerformed
            if(receptorCheckBox.isSelected()){
                    recList= true;
            }else{
                    recList = false;
            }
    }//GEN-LAST:event_receptorCheckBoxActionPerformed

    private void boxCoordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxCoordCheckBoxActionPerformed
            if(boxCoordCheckBox.isSelected()){
                    boxList= true;
            }else{
                    boxList = false;
            }
    }//GEN-LAST:event_boxCoordCheckBoxActionPerformed

    private void appCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appCheckBoxActionPerformed
            if(appCheckBox.isSelected()){
                    appList= true;
            }else{
                    appList = false;
            }
    }//GEN-LAST:event_appCheckBoxActionPerformed

    private void avgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgButtonActionPerformed
        Process proc;
        if(boxCoordField.getText().trim().length() < 1){
            messageArea.append("No GPF Supplied... Can't check results.\n");
            return;
        }
        String box = boxCoordField.getText().trim();
        String odir = outDirField.getText().trim();

        String cmd = ClassLoader.getSystemClassLoader().getResource("DNA.png").getPath();
        cmd = cmd.substring(cmd.indexOf(":")+1, cmd.indexOf("DockoMatic.jar"));
        //cmd = cmd.substring(cmd.indexOf(":")+1, cmd.indexOf("dockOmatic.pl"));
        cmd += "scripts/resultCheck.pl";
        String dir = getDirChoose(lastOutDir);
        if(odir.length() < 1){ odir = dir; }
        if(dir != null){
            cmd += " -d "+dir+" -b "+box+" -o "+odir;
            messageArea.append("Res Check CMD ["+cmd+"]\n");
            messageArea.append("Results written to ["+odir+"/CheckResultsLog_*"+"]\n");
            try{

               proc = Runtime.getRuntime().exec(cmd, null);
            }catch(java.io.IOException e){
                    System.out.println("Caught eX "+e);
            }
        }
    }//GEN-LAST:event_avgButtonActionPerformed

    private void newJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJobButtonActionPerformed
            if(outDirField.getText().trim().length() < 1){
                    messageArea.append("No Output Directory Supplied\nUsing Current Directory '.'\n");
                    outDirField.setText(".");
            }
            String tmp = ligandField.getText();
            if(tmp.length() > 0){
                outDir = new File(outDirField.getText().trim());
                alignJobNums();
	    //System.out.println("alignedJobs " );

                makeJobs();
	    //System.out.println("madeJobs");
            }else{
                    messageArea.append("Ligand needs to be supplied!\n");
            }
    }//GEN-LAST:event_newJobButtonActionPerformed

    private void startAllJobsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAllJobsButtonActionPerformed

	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();
	//model = (DefaultTableModel)outputGridTopComponent.getSelectedTab();

        messageArea.append("Starting All Jobs\n");
        int job;
            for(int i = 0; i< model.getRowCount(); i++){
                if(((String)table.getValueAt(i, 7)).compareTo("Not Started") == 0){
                    job = (Integer)table.getValueAt(i, 0);
                    updateJob(i);
                    jobVector.get(job).runJob();
                    if(((String)table.getValueAt(i, 5)).length() > 0) startExtraLigTimer(i);
                    table.setValueAt("Started", i, 7);
                }else{
                    messageArea.append("Previous Job Activity detected... Re-starting job not allowed!\n");
                }
            }
    }//GEN-LAST:event_startAllJobsButtonActionPerformed

    private void StartSelectedJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartSelectedJobButtonActionPerformed
	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();

            int[] rowNums = table.getSelectedRows();
            int rowCount = table.getSelectedRowCount();
            int jobNum;
            if(rowCount == 0){
                    messageArea.append("NO ROWS SELECTED\n");
                    return;
            }

            messageArea.append("Selected " + rowCount + " Jobs For Starting\n");
            for(int rowNum=0; rowNum < rowCount; rowNum++){
                jobNum = (Integer)table.getValueAt(rowNums[rowNum], 0);
                messageArea.append("Starting Job "+jobNum+"\n");


            //if(((String)outputGridTopComponent.jTable1.getValueAt(rowNum, 7)).compareTo("Not Started") == 0){
                //File dir = new File((String)outputGridTopComponent.jTable1.getValueAt(rowNums[rowNum], 2));
                File dir = new File((String)table.getValueAt(rowNums[rowNum], 2));
                dir.delete();
                dir.mkdir();

                updateJob(rowNums[rowNum]);
                //if(outputGridTopComponent.jTable1.getValueAt(rowNums[rowNum], 7).equals("Started")){
                if(table.getValueAt(rowNums[rowNum], 7).equals("Started")){
                    jobVector.get(jobNum).killJob();
                    messageArea.append("Restarting Job "+jobNum+"\n");
                    (extraLigStatHash.get(jobNum)).stop();
                }
                //outputGridTopComponent.jTable1.setValueAt("Started", rowNums[rowNum], 7);
                table.setValueAt("Started", rowNums[rowNum], 7);
                jobVector.get(jobNum).runJob();
                //if(((String)outputGridTopComponent.jTable1.getValueAt(rowNums[rowNum], 5)).length() > 0) startExtraLigTimer(rowNums[rowNum]);
                if(((String)table.getValueAt(rowNums[rowNum], 5)).length() > 0) startExtraLigTimer(rowNums[rowNum]);
            }
            //}else{
            //      messageArea.append("Previous Job Activity detected... Re-starting job not allowed!\n");
            //}
    }//GEN-LAST:event_StartSelectedJobButtonActionPerformed

    private void removeAllJobsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllJobsButtonActionPerformed
            removeAllJobs();
    }//GEN-LAST:event_removeAllJobsButtonActionPerformed

    private void removeSelectedJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedJobButtonActionPerformed
	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();
            int[] rowNums = table.getSelectedRows();
            int rowCount = table.getSelectedRowCount();
            int jobNum;

            if(rowCount == 0){
                    messageArea.append("NO ROW SELECTED\n");
                    return;
            }
            messageArea.append("Selected " + rowCount + " Jobs For Removal\n");
            for(int rowNum=rowCount-1; rowNum >= 0; rowNum--){
                    jobNum = (Integer)table.getValueAt(rowNums[rowNum], 0);
                    messageArea.append("Killing Job "+jobNum+"\n");
                    jobVector.get(jobNum).killJob();
                    messageArea.append("Removing Job "+jobNum+"\n");
                    (extraLigStatHash.get(jobNum)).stop();
                    model.removeRow(rowNums[rowNum]);
            }
    }//GEN-LAST:event_removeSelectedJobButtonActionPerformed

    private void pymolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pymolButtonActionPerformed
	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();
            String file;
            String dir;
            javax.swing.JFileChooser checker;

          try{
            dir = (String) table.getValueAt(table.getSelectedRow(), 2);
            checker = new javax.swing.JFileChooser(dir);
          }catch (java.lang.ArrayIndexOutOfBoundsException e){
                checker = new javax.swing.JFileChooser();
          }

          try{

            int retval = checker.showOpenDialog(openerTopComponent.this);
            if (retval == checker.APPROVE_OPTION) {
                file = checker.getSelectedFile().getPath();
                Process k = Runtime.getRuntime().exec("pymol "+file);
            }

          }catch (java.io.IOException e){
                    messageArea.append(e + "\n");
          }
    }//GEN-LAST:event_pymolButtonActionPerformed

    // Checks the status of jobs and sets them to Done if they are.
    private void checkStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStatusButtonActionPerformed
	    //@@@FIXME This needs to go trhough all tabs
	JTabbedPane jtp = outputGridTopComponent.outGridTPane;
	int max = jtp.getTabCount();
	for(int j=0; j<max;j++){
	   table = (JTable)((JScrollPane)jtp.getTabComponentAt(j)).getViewport().getView();
	   model = (DefaultTableModel)table.getModel();
           int row = 0;
           try{
            for(row = 0; row < model.getRowCount(); row++){
              //if((Integer)jTable1.getValueAt(row, 0) > 1) continue;      // This should allow us to skip to next directory so we avoid redundant checks.

              String rec = (String) table.getValueAt(row, 3);
              String dir = (String) table.getValueAt(row, 2);
              dir += File.separator;
              File dlg = new File(dir);

              String files[] = dlg.list();

              for(int i=0; i<files.length; i++){
                    if(rec.length() > 0){
                        if(files[i].contains("_Reference"))
                            table.setValueAt("Done", row, 7);
                    }else{
                        // This line only IF NOT running obconformer, or else false positive could occur while obconformer is running.
                        //if(files[i].equalsIgnoreCase((String)jTable1.getValueAt(row, 1)+".pdb"))
                        // This line only IF running obconformer, or there will never be Orig_ file.
                        if(files[i].equalsIgnoreCase("Orig_"+(String)table.getValueAt(row, 1)+".pdb"))
                            table.setValueAt("Done", row, 7);
                    }
              }
            }

            }catch (java.lang.ArrayIndexOutOfBoundsException e){
                    messageArea.append("INVALID ROW SELECTED FOR CHECKING STATUS row ["+row+"]\n");
            }
        }
    }//GEN-LAST:event_checkStatusButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();
        File pdbDir = null;
        String files;
        String dir = null;
        javax.swing.JFileChooser checker;

          try{
            dir = (String) table.getValueAt(table.getSelectedRow(), 2);
            pdbDir = new File(dir);
          }catch (java.lang.ArrayIndexOutOfBoundsException e){
          }

          if(dir == null){
              checker = new javax.swing.JFileChooser();
              checker.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
              int retval = checker.showOpenDialog(openerTopComponent.this);
              if (retval == checker.APPROVE_OPTION) {
                pdbDir = new File(checker.getSelectedFile().getPath());
              }else{
                      return;
              }
          }

          files = getPDBNames(pdbDir);
          String cmd = "pymol " + files;
          try{

              Process k = Runtime.getRuntime().exec(cmd);

          }catch (java.io.IOException e){
              messageArea.append(e + "\n");
          }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void swarmToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swarmToggleButtonActionPerformed
	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();
            int job;
            if(this.swarmToggleButton.isSelected()){
                    messageArea.append("Setting All Jobs To NOT Use Swarm\n");
            }else{
                    messageArea.append("Setting All Jobs To Use Swarm\n");
            }

            for(int i = 0; i< model.getRowCount(); i++){
                job = (Integer)table.getValueAt(i, 0);
                if(this.swarmToggleButton.isSelected()){
                    swarmToggleButton.setText("All Swarm OFF");
                    jobVector.get(job).setSwarm(false);

                    table.setValueAt(false, i, 6);
                }else{
                    swarmToggleButton.setText("All Swarm ON");
                    jobVector.get(job).setSwarm(true);
                    table.setValueAt(true, i, 6);
                }
            }
    }//GEN-LAST:event_swarmToggleButtonActionPerformed

    private void resChkGpfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resChkGpfButtonActionPerformed
        String file = getFileChoose(lastBoxDir);
        if(file != null){
            lastBoxDir = file.substring(0, file.lastIndexOf(File.separator));
            resChkGpfField.setText(file);
        }
    }//GEN-LAST:event_resChkGpfButtonActionPerformed

    private void newTabChBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTabChBoxActionPerformed
       tabFlag = newTabChBox.isSelected();
    }//GEN-LAST:event_newTabChBoxActionPerformed

    /*
     * adjusts job numbers to reflect any subdirectories that may already exist in the
     * output folder.
    */
    private void alignJobNums(){
            String fContents[] = outDir.list();
            int subNum = 0;
            int tmpNum;

            java.util.Arrays.sort(fContents);

            for(String x: fContents){
                    if(x.contains("dock_")){
                          tmpNum = Integer.parseInt(x.substring(x.indexOf("_")+1));
                          if(tmpNum > subNum){
                                  subNum = tmpNum;
                          }
                    }
            }

            currJobNumber = subNum;
    }

    private void makeModelJob(String out, String seq, String tmplt){
	    if(totalJobs < 1){
		    outputGridTopComponent.outGridTPane.removeTabAt(0);
		    model = (DefaultTableModel)outputGridTopComponent.newTabb();
		    //model.addTableModelListener(listen);
	    }else if(tabFlag){
	            model = (DefaultTableModel)outputGridTopComponent.newTabb();
		    //model.addTableModelListener(listen);
	    }else
		    model = (DefaultTableModel)outputGridTopComponent.getSelectedTab();

        outDir = new File(out.trim());

        String base = "";
        try{
            base = outDir.getCanonicalPath();//outDirField.getText().trim();
        }catch(java.io.IOException e){System.out.println(e); System.exit(0);}

        if(base.length() > 0){ base += File.separator;}

	alignJobNums();
        mkSubdirs(1);

	messageArea.append("Making Model Job\n");
        newJob("", "", "", base + "dock_"+Integer.toString(currJobNumber+1), "", false, false, seq, tmplt);

    }

    /*
     * Walks through arrays of ligands, box Coordinate files, and secondary ligands
     * to creates jobs for all combinations of each.
    */
    private void makeJobs(){
	    if(totalJobs < 1){
		    outputGridTopComponent.outGridTPane.removeTabAt(0);
		    model = (DefaultTableModel)outputGridTopComponent.newTabb();
		    //model.addTableModelListener(outputGridTopComponent.tmListen);
	    }else if(tabFlag){
	            model = (DefaultTableModel)outputGridTopComponent.newTabb();
		    //model.addTableModelListener(outputGridTopComponent.tmListen);
	    }else
		    model = (DefaultTableModel)outputGridTopComponent.getSelectedTab();

           //createTmpFiles();
           int count = readTmpFiles();
           mkSubdirs(count);
           String base = "";

           try{
               base = outDir.getCanonicalPath();//outDirField.getText().trim();
           }catch(java.io.IOException e){System.out.println(e); System.exit(0);}

           if(base.length() > 0){ base += File.separator;}

           for(int l=0; l<ligVector.size(); l++){
                   for(int r=0; r<recVector.size(); r++){
                           for(int b=0; b<boxVector.size(); b++){
                                   for(int a=0; a<appVector.size(); a++){
                                           newJob(ligVector.get(l), recVector.get(r), boxVector.get(b), base + "dock_"+Integer.toString(currJobNumber+1), appVector.get(a), false, false, "", "");
                                   }
                           }
                   }
           }

           ligVector.removeAllElements();
           recVector.removeAllElements();
           boxVector.removeAllElements();
           appVector.removeAllElements();

    // start timer to check all job status.
        startJobTimer();
    }

    /*
     * Create subdirectories under main output directory.  Each of these subdirectories represents
     * a job.
    */
    private void mkSubdirs(int total){
            File subDir;// = new File(outDirField.getName().trim());
            String subDirName;
            String base = "";
            try{
                    base = outDir.getCanonicalPath();
            }catch(java.io.IOException e){}

            if(base.length() > 0){ base += File.separator;}

            for(int i=currJobNumber; i<total+currJobNumber; i++){
                    subDirName = base + "dock_" + Integer.toString(i+1);
                    subDir = new File(subDirName);

                    subDir.mkdir();
            }
    }

    /*
     * If using a list, read in data from the list file.  If not using a list, get the info
     * from the text box in the GUI.
    */
    private int readTmpFiles(){
            BufferedReader in;
            String line;
            int ligCount = 0;
            int recCount = 0;
            int boxCount = 0;
            int appCount = 0;

            try{
               if(ligList){
                    ligFile = new File(ligandField.getText().trim());
                    in = new BufferedReader(new FileReader(ligFile));
                    line = in.readLine();
                    while(line != null){
                        ligVector.addElement(line.trim());
                        line = in.readLine();
                        ligCount++;
                    }
                    in.close();
               }else{
                        ligVector.addElement(ligandField.getText().trim());
                        ligCount++;
               }

               if(recList){
                    recFile = new File(receptorField.getText().trim());
                    in = new BufferedReader(new FileReader(recFile));
                    line = in.readLine();
                    while(line != null){
                        recVector.addElement(line.trim());
                        line = in.readLine();
                        recCount++;
                    }
                    in.close();
               }else{
                        recVector.addElement(receptorField.getText().trim());
                        recCount++;
               }

               if(boxList){
                    boxFile = new File(boxCoordField.getText().trim());
                    in = new BufferedReader(new FileReader(boxFile));
                    line = in.readLine();
                    while(line != null){
                        boxVector.addElement(line.trim());
                        line = in.readLine();
                        boxCount++;
                    }
                    in.close();
               }else{
                        boxVector.addElement(boxCoordField.getText().trim());
                        boxCount++;
               }

               if(appList){
                    appFile = new File(appendField.getText().trim());
                    in = new BufferedReader(new FileReader(appFile));
                    line = in.readLine();
                    while(line != null){
                        appVector.addElement(line.trim());
                        line = in.readLine();
                        appCount++;
                    }
                    in.close();
               }else{
                        appVector.addElement(appendField.getText().trim());
                        appCount++;
               }

               //modList.addElement(.getText().trim());
               //modCount++;

            }catch(java.io.IOException e){++exceptionNum; messageArea.append(e+" "+exceptionNum+"\n");}

            //removeTmpFiles();
            return (ligCount * recCount * boxCount * appCount);
    }


    // Add Timer for when to start jobs with Secondary Ligands.
    private void createExtraLigTimer(final int row){
        //final int job = (Integer)outputGridTopComponent.jTable1.getValueAt(row, 0);
        final int job = (Integer)model.getValueAt(row, 0);
        int delay = 30000; // 30 seconds
        java.awt.event.ActionListener extraLigChecker = new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                        checkExtraLigand(evt, job);
                }
        };

        extraLigStatHash.put(job, new Timer(delay, extraLigChecker));
    }

    // Start Timer for when to start jobs with Secondary Ligands.
    private void startExtraLigTimer(final int job){
        (extraLigStatHash.get(job)).start();


    }

    // Timer to check the status of each job.
    private void startJobTimer(){
        int delay = 10000;  // 10 seconds
        java.awt.event.ActionListener jobChecker = new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                        checkStatusButtonActionPerformed(evt);
                }
        };
        jobTimer = new Timer(delay, jobChecker);
        jobTimer.start();
    }

    // Updates jobs in job vector to match any changes that may have taken place
    // in the jobs listed in the GUI.
    private void updateJob(int row){
	    table = outputGridTopComponent.getSelectedTable();

            int job = (Integer)table.getValueAt(row, 0);

            Job tmp = jobVector.get(job);
            tmp.update((String)table.getValueAt(row, 1),
                       (String)table.getValueAt(row, 2),
                       (String)table.getValueAt(row, 3),
                       (String)table.getValueAt(row, 4),
                       (Boolean)table.getValueAt(row, 6),
                       (String)table.getValueAt(row, 8),
                       (String)table.getValueAt(row, 9));

    }

   
    // Create new job from supplied arguments.
    private void newJob(String lig, String rec, String box, String dir, String app, Boolean secondary, Boolean swarm, String seq, String tmplt){

            ++currJobNumber;
            messageArea.append("Creating New Job ["+currJobNumber+"]\n");
            //messageArea.append("Creating New Job ["+totalJobs+"]\n");

	    if(secondary){
                //jobVector.addElement(new Job(currJobNumber, lig, rec, box, dir, swarm, app));
                //model.addRow(new Object[]{currJobNumber, lig, dir, rec, box, "", swarm, "Not Started"});
                //jobVector.addElement(new Job(totalJobs, lig, rec, box, dir, swarm, app));
                jobVector.addElement(new Job(totalJobs, lig, rec, box, dir, swarm, app, seq, tmplt));
                model.addRow(new Object[]{totalJobs, lig, dir, rec, box, "", swarm, "Not Started", seq, tmplt});
            }else{
                //jobVector.addElement(new Job(currJobNumber, lig, rec, box, dir, swarmCheckBox.isSelected(), ""));
                //model.addRow(new Object[]{currJobNumber, lig, dir, rec, box, app, swarmCheckBox.isSelected(), "Not Started"});
                jobVector.addElement(new Job(totalJobs, lig, rec, box, dir, swarmCheckBox.isSelected(), "", seq, tmplt));
                //jobVector.addElement(new Job(totalJobs, lig, rec, box, dir, swarmCheckBox.isSelected(), "" ));
                model.addRow(new Object[]{totalJobs, lig, dir, rec, box, app, swarmCheckBox.isSelected(), "Not Started", seq, tmplt});
            }

            createExtraLigTimer(model.getRowCount() -1);

            boxCoordField.setText("");
            receptorField.setText("");
            ligandField.setText("");
            outDirField.setText("");
            appendField.setText("");
            ++totalJobs;
    }

    // Removes all jobs from the gui screen and the vector that holds all job objects.
    private void removeAllJobs(){
	table = outputGridTopComponent.getSelectedTable();
	model = (DefaultTableModel)table.getModel();
        //killAllJobs();
        messageArea.append("Removing All Jobs from tab\n");
        int jobNum;
        int numRows = model.getRowCount();
            for(int i = numRows-1; i>= 0; i--){
                jobNum = (Integer)table.getValueAt(i, 0);
                jobVector.get(jobNum).killJob();
                model.removeRow(i);
            }
        //jobTimer.stop();
        if(!extraLigStatHash.isEmpty()) extraLigStatHash.clear();
        //jobVector.removeAllElements();
        //currJobNumber = 0;
        //totalJobs = 0;

    }

    // The secondary ligand timer calls this method to check the status of the first job
    // to determine if the secondary ligand job can be started.
    private void checkExtraLigand(java.awt.event.ActionEvent evt, int row) {
        String status = (String)table.getValueAt(row, 7);
        int job = (Integer)table.getValueAt(row, 0);

        if(status.equals("Done")){
            // create and start new job
            doSecondaryJob(row);
            messageArea.append("Starting Secondary Ligand Job\n");
            // kill timer
            (extraLigStatHash.get(job)).stop();

        }
    }

    // Creates and starts the AutoDock job for the secondary ligand.
    private void doSecondaryJob(int row){
        String lig = (String)table.getValueAt(row, 5);
        String rec = (String)table.getValueAt(row, 3);
        String box = (String)table.getValueAt(row, 4);
        String dir = (String)table.getValueAt(row, 2);
        String oldLig = ((String)table.getValueAt(row, 1)).toUpperCase();
        Boolean swarm = false;
        if((Boolean)table.getValueAt(row, 6)){ swarm = true; }
        String app;
        String base = "";

        outDir = new File(dir.trim());

        try{
            base = outDir.getCanonicalPath();
        }catch(java.io.IOException e){}

        if(base.length() > 0){ base += File.separator;}
        app = base + oldLig + "_rank_1.pdb";

        alignJobNums();
        mkSubdirs(1);
        newJob(lig, rec, box, base+"dock_"+Integer.toString(currJobNumber+1), app, true, swarm, "", "");
        jobVector.lastElement().runJob();
        table.setValueAt("Started", model.getRowCount()-1, 7);

    }

    // Creates a String holding names of all .pdb files within a given
    // directory.  The String is used as input to the pymol command.
    private String getPDBNames(File dir){
        String names = "";
        String tmp;
        File[] flist = dir.listFiles();

        for(File file : flist){
                tmp = file.toString();
                if(tmp.contains(".pdb"))  names += tmp + " ";
        }

        return names;
    }


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton LigandButton;
        private javax.swing.JButton StartSelectedJobButton;
        private javax.swing.JCheckBox appCheckBox;
        private javax.swing.JButton appendButton;
        private javax.swing.JTextField appendField;
        private javax.swing.JButton avgButton;
        private javax.swing.JButton boxCoordButton;
        private javax.swing.JCheckBox boxCoordCheckBox;
        private javax.swing.JTextField boxCoordField;
        private javax.swing.JButton jButton1;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel3;
        private javax.swing.JPanel jPanel4;
        private javax.swing.JPanel jPanel5;
        private javax.swing.JPanel jPanel6;
        private javax.swing.JPanel jPanel7;
        private javax.swing.JPanel jPanel8;
        private javax.swing.JPanel jPanel9;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JCheckBox ligandCheckBox;
        private javax.swing.JTextField ligandField;
        protected static javax.swing.JTextArea messageArea;
        private javax.swing.JButton newJobButton;
        private javax.swing.JCheckBox newTabChBox;
        private javax.swing.JButton outDirButton;
        private javax.swing.JTextField outDirField;
        private javax.swing.JButton pymolButton;
        private javax.swing.JButton receptorButton;
        private javax.swing.JCheckBox receptorCheckBox;
        private javax.swing.JTextField receptorField;
        private javax.swing.JButton removeAllJobsButton;
        private javax.swing.JButton removeSelectedJobButton;
        private javax.swing.JButton resChkGpfButton;
        private javax.swing.JTextField resChkGpfField;
        private javax.swing.JButton startAllJobsButton;
        private javax.swing.JCheckBox swarmCheckBox;
        private javax.swing.JToggleButton swarmToggleButton;
        // End of variables declaration//GEN-END:variables
	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized openerTopComponent getDefault() {
		if (instance == null) {
			instance = new openerTopComponent();
		}
		return instance;
	}

	/**
	 * Obtain the openerTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized openerTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			Logger.getLogger(openerTopComponent.class.getName()).warning(
				"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof openerTopComponent) {
			return (openerTopComponent) win;
		}
		Logger.getLogger(openerTopComponent.class.getName()).warning(
			"There seem to be multiple components with the '" + PREFERRED_ID
			+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_ALWAYS;
	}

	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}
}
