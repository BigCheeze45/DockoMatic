# Program: "DockoMatic"
# Project: "DNA Safeguard"
# Filename: "dockOmatic.pl"
#
# Dr. Tim Andersen
# Department of Computer Science
# College of Engineering
# Boise State University
#
# Original Author(s): "Casey Bullock"
#
# Last Modified
#   Date: "June 14, 2010"
#
#
#  This file is part of DockoMatic.
#
#  DockoMatic is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  DockoMatic is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with DockoMatic.  If not, see <http://www.gnu.org/licenses/>.
#

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package modInput;

import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Logger;
//import modinfo.ModInfo;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//modInput//modInput//EN",
autostore = false)
public final class modInputTopComponent extends TopComponent
    implements Lookup.Provider{

    private static modInputTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "modInputTopComponent";
    private InstanceContent dynamicContent = new InstanceContent();
    //private Lookup myLookup = new AbstractLookup(dynamicContent);
    private Lookup.Result jobInfo;
    private String[] items;
    private String outD = "";

    public modInputTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(modInputTopComponent.class, "CTL_modInputTopComponent"));
        setToolTipText(NbBundle.getMessage(modInputTopComponent.class, "HINT_modInputTopComponent"));
	associateLookup(new AbstractLookup(dynamicContent));
	//setUpListener();
	//dynamicContent.add(outD);
	//jobInfo.allItems();
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                seqButton = new javax.swing.JButton();
                jScrollPane1 = new javax.swing.JScrollPane();
                seqArea = new javax.swing.JTextArea();
                tmpltField = new javax.swing.JTextField();
                tmpltButton = new javax.swing.JButton();
                newJobButton = new javax.swing.JButton();
                outDirButton = new javax.swing.JButton();
                outDirField = new javax.swing.JTextField();
                numModelsField = new javax.swing.JTextField();
                jLabel1 = new javax.swing.JLabel();

                org.openide.awt.Mnemonics.setLocalizedText(seqButton, org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.seqButton.text")); // NOI18N
                seqButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                seqButtonActionPerformed(evt);
                        }
                });

                seqArea.setColumns(20);
                seqArea.setLineWrap(true);
                seqArea.setRows(5);
                jScrollPane1.setViewportView(seqArea);

                tmpltField.setText(org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.tmpltField.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(tmpltButton, org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.tmpltButton.text")); // NOI18N
                tmpltButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                tmpltButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(newJobButton, org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.newJobButton.text")); // NOI18N
                newJobButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                newJobButtonActionPerformed(evt);
                        }
                });

                org.openide.awt.Mnemonics.setLocalizedText(outDirButton, org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.outDirButton.text")); // NOI18N
                outDirButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                outDirButtonActionPerformed(evt);
                        }
                });

                outDirField.setText(org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.outDirField.text")); // NOI18N

                numModelsField.setText(org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.numModelsField.text")); // NOI18N

                org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(modInputTopComponent.class, "modInputTopComponent.jLabel1.text")); // NOI18N

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tmpltButton)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(seqButton, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(outDirButton, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(outDirField, javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(tmpltField, javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(numModelsField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(newJobButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(seqButton)
                                        .addComponent(newJobButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tmpltButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tmpltField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(outDirButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(outDirField)
                                        .addComponent(numModelsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12))
                );
        }// </editor-fold>//GEN-END:initComponents

    private String getFileChoose(String lastDir){
        String file = null;
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(lastDir);
        int retval = fc.showOpenDialog(this);
        if (retval == fc.APPROVE_OPTION) {
           file = fc.getSelectedFile().getPath();
        }

        return file;

    }

    private String getDirChoose(String lastDir){
        String dir = null;
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(lastDir);
        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int retval = fc.showOpenDialog(this);
        if (retval == fc.APPROVE_OPTION) {
           dir = fc.getSelectedFile().getPath();
        }

        return dir;

    }

    private void seqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seqButtonActionPerformed
        String file = getFileChoose("./");
        if(file != null)
            seqArea.setText(file);
    }//GEN-LAST:event_seqButtonActionPerformed

    private void tmpltButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tmpltButtonActionPerformed
        String file = getFileChoose("./");
        if(file != null)
            tmpltField.setText(file);
    }//GEN-LAST:event_tmpltButtonActionPerformed

/*    private void setUpListener(){
	jobInfo = WindowManager.getDefault().findTopComponent("openerTopComponent").getLookup().lookupResult(String.class);
	//dynamicContent.add(outDirField.getText(), seqArea.getText(), tmpltField.getText());
	//jobInfo = myLookup.lookup(new Lookup.Template(String.class));
	//jobInfo.allItems();
	//jobInfo.addLookupListener((LookupListener) opener);
	jobInfo.addLookupListener((LookupListener) opener);
	//dynamicContent.add(items);
        //jobInfo.allItems();
	System.out.println("************* setUplistener\n");
    }
*/
    //@Override
    //public Lookup getLookup(){
//	    return myLookup;
 //   }

    private void newJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJobButtonActionPerformed
	String[] items = new String[3];
    //System.out.println("*****************NewJobButtonPressed\n");
//	    ModInfo mofo = new ModInfo(outDirField.getText(), seqArea.getText(), tmpltField.getText());
    TopComponent tc = WindowManager.getDefault().findTopComponent("openerTopComponent");
    ArrayList<String> alist = new ArrayList<String>();
	    alist.add( outDirField.getText());
	    alist.add( seqArea.getText());
	    alist.add( tmpltField.getText());
	    //items[0] = outDirField.getText();
	    //items[1] = seqArea.getText();
	    //items[2] = tmpltField.getText();
    dynamicContent.add(alist);
    //dynamicContent.set(Collections.singleton(alist), null);
    /*if(tc != null){
	    tc.open();
	    tc.requestActive();
    }*/
    this.dynamicContent.remove(alist);
	    outDirField.setText("");
	    seqArea.setText("");
	    tmpltField.setText("");

	//TopComponent opener = WindowManager.getDefault().findTopComponent("openerTopComponent");
	//dynamicContent.add(outDirField.getText(), seqArea.getText(), tmpltField.getText());
	//jobInfo = myLookup.lookup(new Lookup.Template(String.class));
	//jobInfo.allItems();
	//jobInfo.addLookupListener((LookupListener) opener);

	//dynamicContent.add(tmp);
        //jobInfo.allItems();
    //System.out.println("*********************dynCont added\n");
    }//GEN-LAST:event_newJobButtonActionPerformed

    private void outDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDirButtonActionPerformed
	String dir = getDirChoose("./");
        if(dir != null){
            //lastOutDir = dir;
            outDirField.setText(dir);
        }    // TODO add your handling code here:
    }//GEN-LAST:event_outDirButtonActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JLabel jLabel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JButton newJobButton;
        private javax.swing.JTextField numModelsField;
        private javax.swing.JButton outDirButton;
        private javax.swing.JTextField outDirField;
        private javax.swing.JTextArea seqArea;
        private javax.swing.JButton seqButton;
        private javax.swing.JButton tmpltButton;
        private javax.swing.JTextField tmpltField;
        // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized modInputTopComponent getDefault() {
        if (instance == null) {
            instance = new modInputTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the modInputTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized modInputTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(modInputTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof modInputTopComponent) {
            return (modInputTopComponent) win;
        }
        Logger.getLogger(modInputTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
